import axios from 'axios';
import fs from 'fs';

let isSpotifyProcessing = false;
const wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// Funci√≥n para buscar m√∫sica en Spotify
const searchSpotify = async (query, maxRetries = 2) => {
  let attempt = 0;
  while (attempt < maxRetries) {
    try {
      const apiUrl = `https://delirius-apiofc.vercel.app/search/spotify?q=${encodeURIComponent(query)}`;
      const response = await axios.get(apiUrl, { timeout: 10000 });

      if (response.data?.status && response.data.data?.length > 0) {
        return response.data.data[0];
      }
    } catch (error) {
      console.error(`‚ùå Error en intento ${attempt + 1} al buscar en Spotify:`, error.message);
      if (attempt < maxRetries - 1) await wait(12000);
    }
    attempt++;
  }
  return null;
};

// Funci√≥n para obtener el enlace de descarga
const fetchSpotifyDownloadLink = async (trackUrl, maxRetries = 2) => {
  let attempt = 0;
  while (attempt < maxRetries) {
    try {
      const apiUrl = `https://api.vreden.my.id/api/spotify?url=${encodeURIComponent(trackUrl)}`;
      const response = await axios.get(apiUrl, { timeout: 10000 });

      if (response.data?.status === 200 && response.data.result?.music) {
        return response.data.result;
      }
    } catch (error) {
      console.error(`‚ùå Error en intento ${attempt + 1} al obtener enlace de descarga:`, error.message);
      if (attempt < maxRetries - 1) await wait(12000);
    }
    attempt++;
  }
  return null;
};

let spotifyDownloader = async (m, { conn, text, usedPrefix, command }) => {
  if (!text?.trim()) {
    let example = `${usedPrefix}${command} Twice`;
    return conn.sendMessage(
      m.chat,
      { text: `‚ùó *Ingresa el nombre de una canci√≥n o artista de Spotify.*\n\n*Ejemplo:* ${example}` },
      { quoted: m }
    );
  }

  if (isSpotifyProcessing) {
    return conn.sendMessage(
      m.chat,
      { text: `‚ùó *Ya hay una solicitud en proceso. Espera a que termine antes de enviar otra.*` },
      { quoted: m }
    );
  }
  isSpotifyProcessing = true;

  const reactionMessage = await conn.sendMessage(
    m.chat,
    { text: `üîç *Ok Buscando Tu M√∫sica En Spotifyüòâ...*` },
    { quoted: m }
  );
  await conn.sendMessage(
    m.chat,
    { react: { text: 'üéµ', key: reactionMessage.key } },
    { quoted: m }
  );

  try {
    // Buscar la canci√≥n en Spotify
    const trackInfo = await searchSpotify(text);

    if (!trackInfo) {
      await conn.sendMessage(m.chat, { react: { text: 'üî¥', key: reactionMessage.key } }, { quoted: m });
      throw new Error("No se encontr√≥ la canci√≥n en Spotify.");
    }

    // Enviar la informaci√≥n de la canci√≥n primero
    const trackDetails = `‚åò‚îÅ‚îÄ‚îÅ‚îÄ‚â™ìÑÇ*Spotify*ùÑ¢‚îÄ‚îÅ‚îÄ‚îÅ‚åò
üéµ *T√≠tulo:* ${trackInfo.title}
üé§ *Artista:* ${trackInfo.artist}
üíΩ *√Ålbum:* ${trackInfo.album}
‚è≥ *Duraci√≥n:* ${trackInfo.duration}
üî• *Popularidad:* ${trackInfo.popularity}
üìÖ *Fecha de publicaci√≥n:* ${trackInfo.publish}

> _* Prohibido la copia, C√≥digo Oficial de MediaHub‚Ñ¢*_`;

    await conn.sendMessage(m.chat, {
      image: { url: trackInfo.image },
      caption: trackDetails,
    });

    // Obtener el enlace de descarga
    const downloadInfo = await fetchSpotifyDownloadLink(trackInfo.url);

    if (!downloadInfo || !downloadInfo.music) {
      await conn.sendMessage(m.chat, { react: { text: 'üî¥', key: reactionMessage.key } }, { quoted: m });
      throw new Error("No se pudo obtener el enlace de descarga de la canci√≥n.");
    }

    await conn.sendMessage(m.chat, { react: { text: 'üü¢', key: reactionMessage.key } }, { quoted: m });

    // Enviar el audio descargado
    const payload = {
      audio: { url: downloadInfo.music },
      mimetype: 'audio/mpeg',
      fileName: `${downloadInfo.title}.mp3`,
      caption: `> _* Prohibido la copia, C√≥digo Oficial de MediaHub‚Ñ¢*_`,
      ptt: false,
      thumbnail: fs.readFileSync('./media/icon-all.jpg')
    };

    await conn.sendMessage(m.chat, payload, { quoted: m });

  } catch (error) {
    console.error("‚ùå Error:", error);
    await conn.sendMessage(
      m.chat,
      { text: `‚ùå *Ocurri√≥ un error:*\n${error.message || "Error desconocido"}` },
      { quoted: m }
    );
  } finally {
    isSpotifyProcessing = false;
  }
};

spotifyDownloader.command = /^(spotify|spotdl)$/i;
export default spotifyDownloader;