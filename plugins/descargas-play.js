import fetch from "node-fetch";
import yts from "yt-search";

// Funci√≥n para obtener datos de la API con reintentos
const fetchWithRetries = async (url, maxRetries = 2) => {
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      const response = await fetch(url);
      const data = await response.json();
      if (data?.status === 200 && data.result?.download?.url) {
        return data.result;
      }
    } catch (error) {
      console.error(`Intento ${attempt + 1} fallido:`, error.message);
    }
  }
  throw new Error("No se pudo obtener la m√∫sica despu√©s de varios intentos.");
};

// Handler principal
let handler = async (m, { conn, text }) => {
  if (!text) {
    return conn.sendMessage(m.chat, {
      text: "‚ùó *Ingresa un t√©rmino de b√∫squeda para encontrar m√∫sica.*\n\n*Ejemplo:* `.play No llores m√°s`",
    });
  }

  try {
    // Buscar en YouTube
    const searchResults = await yts(text);
    const video = searchResults.videos[0];
    if (!video) throw new Error("No se encontraron resultados.");

    // Obtener datos de descarga
    const apiUrl = `https://api.vreden.web.id/api/ytmp3?url=${encodeURIComponent(video.url)}`;
    const apiData = await fetchWithRetries(apiUrl);

    // Enviar m√∫sica como archivo
    await conn.sendMessage(m.chat, {
      document: { url: apiData.download.url },
      mimetype: "audio/mpeg",
      fileName: `${apiData.metadata.title}.mp3`,
      caption: `üéµ *T√≠tulo:* ${apiData.metadata.title}\nüëÅÔ∏è *Vistas:* ${apiData.metadata.views}\n‚è≥ *Duraci√≥n:* ${apiData.metadata.duration.timestamp}\n‚úçÔ∏è *Autor:* ${apiData.metadata.author.name}`,
    });
  } catch (error) {
    console.error("Error:", error);
    await conn.sendMessage(m.chat, {
      text: `‚ùå *Error al procesar tu solicitud:*\n${error.message || "Error desconocido"}`,
    });
  }
};

handler.command = /^play $/i;

export default handler;